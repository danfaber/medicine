(function(){
    var app = angular.module("medicine");
    var optionValueMap = {};
    var optionGroups =
        [
            {
                id: 1,
                name: "Disease Type",
                optionValues: [
                    {
                        id: 1,
                        description: "Heart Problems",
                        optionValues: [
                            {
                                id: 101,
                                description: "Lower Heart",
                                optionValues:[]
                            },
                            {
                                id: 102,
                                description: "Mid Heart",
                                optionValues:[]
                            },
                            {
                                id: 103,
                                description: "Upper Heart",
                                optionValues: [
                                    {
                                        id: 104,
                                        description: "Upper A",
                                        optionValues: []
                                    },
                                    {
                                        id: 105,
                                        description: "Upper B",
                                        optionValues: []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        id: 2,
                        description: "Lung Problems",
                        optionValues: []
                    },
                    {
                        id: 3,
                        description: "Brain Problems",
                        optionValues: []
                    }
                ]
            },
            {
                id: 2,
                name: "Severity",
                optionValues: [
                    {
                        id: 4,
                        description: "Low",
                        optionValues: []
                    },
                    {
                        id: 5,
                        description: "Medium",
                        optionValues: []
                    },
                    {
                        id: 6,
                        description: "High",
                        optionValues: []
                    }
                ]
            }

        ];


    var isParent = function(optionValue)
    {
        return optionValue.optionValues && optionValue.optionValues.length > 0;
    };



    function buildOptionValueMap()
    {
        _(optionGroups).each(function(optionGroup){

            optionValueMap[optionGroup.id] = [];

            _(optionGroup.optionValues).each(function(optionValue)
            {
                recursiveBuildOptionValueMap(optionValue,[{id:optionGroup.id, description:optionGroup.name}], optionGroup.id);
            })
        });
    };


    function recursiveBuildOptionValueMap(optionValue, parentChain, optionGroupId)
    {
        var chainCopy = angular.copy(parentChain);

        chainCopy.push( {id: optionValue.id, description: optionValue.description});

        if (isParent(optionValue)) {

            _(optionValue.optionValues).each(function(value){
                recursiveBuildOptionValueMap(value, chainCopy, optionGroupId);
            });

        } else {
            optionValueMap[optionGroupId].push(chainCopy);
        }
    }

    buildOptionValueMap();  // run this once on startup


    var getOptionGroup = function (optionGroupId) {
        var optionGroup = _(optionGroups)
            .filter(function (opt) { return opt.id == optionGroupId; })
            [0];
        return optionGroup;
    };


    var getParentChain = function(optionGroupId, optionValueId)
    {
        var optionValues = optionValueMap[optionGroupId];

        var sortedByDepthInChain = _(optionValues).sortBy(function(chain) {
            var ids = _(chain).map(function(value) {return value.id;})
            return ids.indexOf(optionValueId);
        })

        return _(sortedByDepthInChain).last();
    }

    var getOptionValue = function(optionGroupId, optionValueId) {
        var match;
        var nextLevelOptionValues = [getOptionGroup(optionGroupId)];

        do {
            nextLevelOptionValues = _.chain(nextLevelOptionValues)
                .map(function (value) {return value.optionValues;})
                .filter(function (value) {return value;})
                .flatten(true)
                .value();

            if (nextLevelOptionValues.length === 0) { throw "option value not found!";}

            match = _(nextLevelOptionValues)
                .filter(function (value) {return value.id == optionValueId;})

        } while (match.length == 0);

        return match[0];
    }


    var getParentId = function(optionGroupId, optionValueId)
    {
        var optionValues = optionValueMap[optionGroupId];
        var index;
        var i = 0;
        var ids;

        do {
            ids = _(optionValues[i]).map(function(val) {return val.id;});
            index = ids.indexOf(optionValueId);
            i++;
        } while (index === -1);

        return optionValues[i-1][index-1];
    }



    app.factory("optionGroupDataService", function(){
        return {
            getOptionGroup: getOptionGroup,
            isParent: isParent,
            getOptionValue: getOptionValue,
            getParentChain: getParentChain,
            getParentId: getParentId
        };
    });

})();